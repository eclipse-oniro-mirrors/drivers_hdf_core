/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "v1_0/types.h"
#include <hdf_log.h>
#include <message_parcel.h>
#include <securec.h>

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_0 {



bool FooInfoBlockMarshalling(OHOS::MessageParcel& data, const OHOS::HDI::Foo::V1_0::FooInfo& dataBlock)
{
    if (!data.WriteUint32(dataBlock.id)) {
        HDF_LOGE("%{public}s: write dataBlock.id failed!", __func__);
        return false;
    }

    if (!data.WriteCString(dataBlock.name.c_str())) {
        HDF_LOGE("%{public}s: write dataBlock.name failed!", __func__);
        return false;
    }

    if (!data.WriteUint64(static_cast<uint64_t>(dataBlock.type))) {
        HDF_LOGE("%{public}s: write dataBlock.type failed!", __func__);
        return false;
    }
    return true;
}

bool FooInfoBlockUnmarshalling(OHOS::MessageParcel& data, OHOS::HDI::Foo::V1_0::FooInfo& dataBlock)
{
    if (!data.ReadUint32(dataBlock.id)) {
        HDF_LOGE("%{public}s: read dataBlock.id failed!", __func__);
        return false;
    }

    const char* nameCp = data.ReadCString();
    if (nameCp == nullptr) {
        HDF_LOGE("%{public}s: read nameCp failed", __func__);
        return false;
    }
    dataBlock.name = nameCp;

    {
        uint64_t enumTmp = 0;
        if (!data.ReadUint64(enumTmp)) {
            HDF_LOGE("%{public}s: write dataBlock.type failed!", __func__);
            return false;
        }
        dataBlock.type = static_cast<enum FooType2>(enumTmp);
    }
    return true;
}

} // V1_0
} // Foo
} // HDI
} // OHOS

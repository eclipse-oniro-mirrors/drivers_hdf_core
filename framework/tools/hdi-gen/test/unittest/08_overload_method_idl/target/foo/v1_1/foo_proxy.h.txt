/*
 * Copyright (c) 2024 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef OHOS_HDI_FOO_V1_1_FOOPROXY_H
#define OHOS_HDI_FOO_V1_1_FOOPROXY_H

#include "v1_0/foo_proxy.h"
#include "v1_1/ifoo.h"
#include <iproxy_broker.h>

namespace OHOS {
namespace HDI {
namespace Foo {
namespace V1_1 {

class FooProxy : public IProxyBroker<OHOS::HDI::Foo::V1_1::IFoo> {
public:
    explicit FooProxy(const sptr<IRemoteObject>& remote) : IProxyBroker<OHOS::HDI::Foo::V1_1::IFoo>(remote) {}

    virtual ~FooProxy() = default;

    inline bool IsProxy() override
    {
        return true;
    }

    int32_t Ping(const std::string& sendMsg, std::string& recvMsg, int32_t code) override;

    int32_t GetData(std::string& info, std::string& ver) override;

    int32_t Ping(const std::string& sendMsg, std::string& recvMsg) override;

    int32_t GetData(std::string& info) override;

    int32_t InfoTest(int32_t inParam, double& outParam) override;

    int32_t GetVersion(uint32_t& majorVer, uint32_t& minorVer) override;

    static int32_t Ping_(const std::string& sendMsg, std::string& recvMsg, int32_t code,
         const sptr<IRemoteObject> remote);

    static int32_t GetData_(std::string& info, std::string& ver, const sptr<IRemoteObject> remote);

private:
    static inline BrokerDelegator<OHOS::HDI::Foo::V1_1::FooProxy> delegator_;
};

} // V1_1
} // Foo
} // HDI
} // OHOS

#endif // OHOS_HDI_FOO_V1_1_FOOPROXY_H